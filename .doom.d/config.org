#+title: Samb's Doom Emacs Config
#+author: Samb

* 设置大名
#+begin_src emacs-lisp
  (setq user-full-name "Jie Samb"
        user-mail-address "samb233@hotmail.com")
#+end_src

* 文件编码
将文件编码全部设定为utf-8-unix
#+begin_src emacs-lisp
  (setq-default buffer-file-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8-unix)
  (prefer-coding-system 'utf-8-unix)
#+end_src

* 窗口设置
设置窗口的大小。
我喜欢用较小的窗口记笔记，所以设置的80列50行。写代码是最大化窗口即可。
#+begin_src emacs-lisp
  (pushnew! default-frame-alist '(width . 80) '(height . 50))
  ;; (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

设置窗口透明度。
设置alpha是调用系统窗口混合器来实现半透明，文字和图片也会半透明化
而alpha-background是emacs29新引入的特性，只半透明背景，不会半透明文字和图片。
#+begin_src emacs-lisp
  ;; (add-to-list 'default-frame-alist '(alpha-background . 85))
  ;; (add-to-list 'default-frame-alist (cons 'alpha 90))
#+end_src

设置标题栏名称。
我将其设置为文件路径。
#+begin_src emacs-lisp
  (setq frame-title-format
        '((:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name))
                   "%b"))))
#+end_src

* 字体设置
设置字体与字体大小。
将doom-unicode-font设置为Sarasa Mono SC即可解决Doom Emacs的中文显示问题。
Sarasa这个字体能在一定程度上与英文对齐，能让代码的80线不再歪歪扭扭。
并且能兼容Doom的Big Mode。
#+begin_src emacs-lisp
  (setq doom-font (font-spec :family "IBM Plex Mono Medm" :size 11.0))
  (setq doom-variable-pitch-font (font-spec :family "BlexMono Nerd Font"))
  (setq doom-unicode-font (font-spec :family "Sarasa Mono SC" ))
#+end_src

* 滚动设置
设置鼠标滚动。
#+begin_src emacs-lisp
  (setq scroll-margin 9)
  (setq mouse-wheel-scroll-amount '
        (3
         ((shift) . hscroll)
         ((meta))
         ((control) . text-scale)))
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
#+end_src

emacs29新加入的像素滚动模式。
使页面滚动动画流畅了不少，但也增加了cpu开销。
我觉得原来的滚动其实还行，可能是终端用习惯了吧。
#+begin_src emacs-lisp
  ;; (pixel-scroll-precision-mode t)
#+end_src

* 外观设置
设置emacs的外观。
主题设置。
#+begin_src emacs-lisp
  (setq doom-theme 'doom-tomorrow-day)
#+end_src

设置相对行号。
使用evil-mode怎么能少了这个！
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
#+end_src

设置doom-modeline。
我喜欢简洁一点，去掉了上面的部分图标等。
#+begin_src emacs-lisp
  (setq doom-modeline-modal nil)
  (setq doom-modeline-buffer-encoding t)
  (setq doom-modeline-vcs-max-length 20)
  (setq doom-modeline-height 28)
  (setq doom-modeline-buffer-modification-icon nil)
  (setq doom-modeline-buffer-state-icon nil)
  ;; (setq doom-modeline-bar-width 7)
  ;; (setq doom-modeline-major-mode-icon t)
#+end_src


* 基础按键设置
设置Ctrl-v粘贴
#+begin_src emacs-lisp
  (evil-define-key 'insert 'global
    (kbd "C-v") 'yank)
#+end_src

设置visual模式下Shift-j和Shift-k上下移动代码块
#+begin_src emacs-lisp
  (evil-define-key 'visual 'global
    (kbd "J") 'drag-stuff-down
    (kbd "K") 'drag-stuff-up)
#+end_src

设置:q命令只关闭buffer，不关闭emacs，关闭时，输入:quit
#+begin_src emacs-lisp
  (evil-ex-define-cmd "q" 'kill-this-buffer)
  (evil-ex-define-cmd "quit" 'evil-quit)
#+end_src

设置窗口跳转。使用插件ace-window
#+begin_src emacs-lisp
  (map! :leader
        :desc "ace-select-window" "w a" #'ace-select-window
        :desc "ace-select-window" "w w" #'ace-select-window
        )
#+end_src

* lsp客户端
设置代码补全。
当然是用目前最快的lsp-bridge。
#+begin_src emacs-lisp
  (use-package! lsp-bridge
    :config
    (map! :map acm-mode-map
          [tab]           #'acm-select-next
          [backtab]       #'acm-select-prev
          )
    (map! :leader
          (:prefix-map ("l" . "LSP")
           :desc "LSP rename" "n" #'lsp-bridge-rename
           :desc "LSP find definitions" "f" #'lsp-bridge-find-def
           :desc "LSP find reference" "r" #'lsp-bridge-find-references
           :desc "LSP ui doc toggle" "h" #'lsp-bridge-popup-documentation
           :desc "LSP restart server" "R" #'lsp-bridge-restart-process
           ))
    (evil-define-key 'insert acm-mode-map
      (kbd "C-j") 'acm-select-next
      (kbd "C-k") 'acm-select-prev
      (kbd "C-l") 'acm-complete
      (kbd "RET") 'acm-complete
      )
    (add-hook 'acm-mode-hook #'evil-normalize-keymaps)

    (evil-define-key 'normal lsp-bridge-ref-mode-map
      (kbd "RET") 'lsp-bridge-ref-open-file-and-stay
      (kbd "q") 'lsp-bridge-ref-quit
      )

    (setq lsp-bridge-enable-mode-line nil)
    (setq lsp-bridge--mode-line-format '())
    (require 'yasnippet)
    (yas-global-mode 1)
    (global-lsp-bridge-mode))
#+end_src

另外，lsp-bridge的补全按键，在Doom下org-mode里会被覆盖导致无法使用。
在此将几个按键解绑定。
#+begin_src emacs-lisp
  (map! :after evil-org
        :map evil-org-mode-map
        :i "C-j" nil
        :i "C-k" nil
        :i "RET" nil
        :i [return] nil)
#+end_src

* 文件管理器
配置dirvish。
Dirvish真是接近完美的文件管理器。除了鼠标操作比较难受外，处处让我感到满足。
#+begin_src emacs-lisp
  (use-package dirvish
    :init
    (dirvish-override-dired-mode)
    :custom
    (dirvish-quick-access-entries ; It's a custom option, `setq' won't work
     '(("h" "~/"                          "Home")
       ("c" "~/Codes/"                    "Codes")
       ("t" "~/Codes/Try/"                "Try")
       ("p" "~/Codes/Projects/"           "Projects")
       ("r" "~/Codes/Reading/"            "Reading")
       ("d" "~/Documents/"                "Documents")
       ("w" "~/工作/"                      "工作")
       ("D" "~/Downloads/"                "Downloads")
       ("P" "~/Pictures/"                 "Pictures")
       ("v" "~/Videos/"                   "Videos")
       ("s" "~/Shared/"                   "Shared")
       ("M" "/mnt/"                       "Drives")
       ("T" "~/.local/share/Trash/files/" "TrashCan")
       ))
    :config
    ;; (dirvish-peek-mode) ; Preview files in minibuffer
    (dirvish-side-follow-mode) ; similar to `treemacs-follow-mode'
    ;; (setq dirvish-reuse-session nil) ; disable session reuse
    ;; (setq dirvish--debouncing-delay 2)
    (setq dirvish-async-listing-threshold 10000)
    (setq dirvish-use-mode-line nil)
    ;; (setq dirvish-default-layout '(0 0.4 0.6))
    ;; (setq dirvish-mode-line-format
    ;;       '(:left (sort symlink) :right (omit yank index)))
    (setq dirvish-header-line-height '46)
    ;; (setq dirvish-mode-line-height '46)
    (setq dirvish-attributes
          '(file-time all-the-icons file-size collapse subtree-state vc-state git-msg))
    (setq delete-by-moving-to-trash t)
    (setq dired-listing-switches
          "-l --almost-all --human-readable --group-directories-first --no-group")
    (setq dirvish-fd-default-dir "/home/jiesamb/")
    (setq dirvish-open-with-programs
          `(
            (,dirvish-audio-exts . ("mpv" "%f"))
            (,dirvish-video-exts . ("mpv" "%f"))
            (,dirvish-image-exts . ("gwenview" "%f"))
            (("doc" "docx") . ("wps" "%f"))
            (("ppt" "pptx") . ("wpp" "%f"))
            (("xls" "xlsx") . ("et" "%f"))
            (("pdf") . ("evince" "%f"))
            (("odt" "ods" "rtf" "odp") . ("libreoffice" "%f"))
            ))
    ;; (setq dirvish-header-line-format '(:left (path) :right (free-space)))
    (setq dirvish-header-line-format '(:left (path) :right (yank sort index)))
    (setq dirvish-path-separators (list "  ~" "  " "/"))
    (setq dirvish-side-display-alist `((side . right) (slot . -1)))
    (setq dirvish-side-width 40)
    (setq dirvish-side-auto-close t)
    :hook
    (dired-mode . dired-omit-mode)
    :bind ; Bind `dirvish|dirvish-side|dirvish-dwim' as you see fit
    (
     :map dirvish-mode-map ; Dirvish inherits `dired-mode-map'
     ("f"   . dirvish-file-info-menu)
     ("y"   . dirvish-yank-menu)
     ("^"   . dirvish-history-last)
     ("H"   . dirvish-history-jump) ; remapped `describe-mode'
     ("s"   . dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
     ("v"   . dirvish-vc-menu)      ; remapped `dired-view-file'
     ("TAB" . dirvish-subtree-toggle)
     ("M-f" . dirvish-history-go-forward)
     ("M-b" . dirvish-history-go-backward)
     ("M-l" . dirvish-ls-switches-menu)
     ("M-m" . dirvish-mark-menu)
     ("M-t" . dirvish-layout-toggle)
     ("M-s" . dirvish-setup-menu)
     ("M-e" . dirvish-emerge-menu)
     ("M-j" . dirvish-fd-jump)))
#+end_src

当然，由于使用了evil模式，所以还得额外配置一下按键绑定。
#+begin_src emacs-lisp
  (evil-define-key 'normal dirvish-mode-map
    (kbd "e") 'dired-create-empty-file
    (kbd "q") 'dirvish-quit ;; use dirvish would kill the preview buffer
    (kbd "s") 'dirvish-quicksort
    (kbd "a") 'dirvish-quick-access
    (kbd "F") 'dirvish-fd
    (kbd "y") 'dirvish-yank-menu
    (kbd "f") 'dirvish-file-info-menu
    (kbd ".") 'dired-omit-mode
    )

  (evil-define-key 'normal dired-mode-map
    (kbd "h") 'dired-up-directory
    (kbd "l") 'dired-find-file)
    #+end_src

以及一些相关的常用操作，我将其绑定到SPC-v-...中
#+begin_src emacs-lisp
  (map! :leader
        (:prefix ("v" . "dirvish and vertico")
         :desc "Open dirvish" "v" #'dirvish
         :desc "Quit dirvish" "q" #'dirvish-quit
         :desc "Toggle dirvish-side" "s" #'dirvish-side
         :desc "Fd in dirvish" "F" #'dirvish-fd
         :desc "Jump using fd" "J" #'dirvish-fd-jump
         :desc "Jump recent dir" "j" #'consult-dir
         :desc "Fd find file in dir" "f" #'+vertico/consult-fd
         :desc "Project searching by vertico" "p" #'+vertico/project-search
         :desc "Neotree toggle" "n" #'neotree-toggle
         :desc "select Window" "w" #'ace-select-window
         :desc "open with other coding system" "c" #'revert-buffer-with-coding-system
         :desc "change buffer coding system" "C" #'set-buffer-file-coding-system
         ))
#+end_src

* 终端设置
emacs里终端我主要用两个，eshell和vterm。
eshell打开就在当前文件目录下，vterm打开会在当前项目目录下。
vterm中运行的是zsh，并且性能较好，所以会更常用些。
#+begin_src emacs-lisp
(after! vterm
 (setq vterm-max-scrollback 10000)
 (remove-hook 'vterm-mode-hook 'hide-mode-line-mode))
#+end_src

设置eshell的主题
#+begin_src emacs-lisp
  (after! eshell
    (eshell-git-prompt-use-theme 'simple)
    )
#+end_src

* magit设置
magit好用极了，根本不需要设置。
在这里设置的其实是vc的设置，因为性能原因被关闭了。
但随时随地知道git状态其实是蛮重要的，我把它打开。
#+begin_src emacs-lisp
  (setq auto-revert-check-vc-info t)
#+end_src

* Docker设置
说是docker，但其实在ArchLinux上我更喜欢用podman。
主要设置一下窗口的大小、窗口内的样式等。
#+begin_src emacs-lisp
  (use-package docker
    :config
    (set-popup-rule! "^\\* podman " :size 0.8 :modeline t :quit 'other)
    (setq docker-command "podman")
    (setq docker-compose-command "podman-compose")
    (setq docker-pop-to-buffer-action '(display-buffer-same-window))
    (setq docker-run-async-with-buffer-function #'docker-run-async-with-buffer-vterm)
    (setq docker-container-columns
          '(
            (:name "Id" :width 14 :template "{{ json .ID }}" :sort nil :format nil)
            (:name "Names" :width 12 :template "{{ json .Names }}" :sort nil :format nil)
            (:name "Status" :width 14 :template "{{ json .Status }}" :sort nil :format nil)
            (:name "Ports" :width 24 :template "{{ json .Ports }}" :sort nil :format nil)
            (:name "Image" :width 40 :template "{{ json .Image }}" :sort nil :format nil)
            (:name "Created" :width 21 :template "{{ json .CreatedAt }}" :sort nil :format
                   (lambda
                     (x)
                     (format-time-string "%F %T"
                                         (date-to-time x))))
            (:name "Command" :width 20 :template "{{ json .Command }}" :sort nil :format nil)
            )
          )
    )
#+end_src

我最常用的操作其实就是打开容器页面，开开关关，看看日志。
单独设置了一个快捷键。
#+begin_src emacs-lisp
  (map! :leader
        :desc "docker Containers" "o c" #'docker-containers
        )
#+end_src

* 输入法配置
配置中英文输入法自动切换。
#+begin_src emacs-lisp
  (use-package sis
    :config
    (sis-ism-lazyman-config "1" "2" 'fcitx5)
    ;; enable the /cursor color/ mode
    ;; (sis-global-cursor-color-mode t)
    ;; enable the /respect/ mode
    (sis-global-respect-mode t)
    ;; enable the /context/ mode for all buffers
    (sis-global-context-mode t)
    ;; enable the /inline english/ mode for all buffers
    ;; (sis-global-inline-mode t)
    )
#+end_src

* Org-Mode设置
配置一下Org-Mode的主题颜色、字体大小等。
最后一行用于设置org-mode的代码块，使其能有代码缩进，更好看些。
#+begin_src emacs-lisp
  (setq org-directory "~/Documents/Notes")
  (after! org
    (defun org-colors-tomorrow-night ()
      (interactive)
      (dolist
          (face
           '((org-level-1 1.3 "#81a2be" ultra-bold)
             (org-level-2 1.2 "#b294bb" extra-bold)
             (org-level-3 1.1 "#b5bd68" bold)
             (org-level-4 1.0 "#e6c547" semi-bold)
             (org-level-5 1.0 "#cc6666" normal)
             (org-level-6 1.0 "#70c0ba" normal)
             (org-level-7 1.0 "#b77ee0" normal)
             (org-level-8 1.0 "#9ec400" normal)))
        (set-face-attribute (nth 0 face) nil :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
      (set-face-attribute 'org-table nil :weight 'normal :height 1.0 :foreground "#bfafdf"))

    (defun org-colors-tomorrow-day()
      (interactive)
      (dolist
          (face
           '((org-level-1 1.3 "#4271ae" ultra-bold)
             (org-level-2 1.2 "#8959a8" extra-bold)
             (org-level-3 1.1 "#b5bd68" bold)
             (org-level-4 1.0 "#e6c547" semi-bold)
             (org-level-5 1.0 "#c82829" normal)
             (org-level-6 1.0 "#70c0ba" normal)
             (org-level-7 1.0 "#b77ee0" normal)
             (org-level-8 1.0 "#9ec400" normal)))
        (set-face-attribute (nth 0 face) nil :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
      (set-face-attribute 'org-table nil :weight 'normal :height 1.0 :foreground "#bfafdf"))

    (org-colors-tomorrow-day)

    (setq org-src-preserve-indentation nil))
#+end_src

* markdown设置
也是设置一下字体大小和颜色。
在emacs下我也很少写markdown了。
#+begin_src emacs-lisp
  (custom-set-faces
   '(markdown-header-face ((t (:inherit font-lock-function-name-face :weight bold :family "variable-pitch"))))
   '(markdown-header-face-1 ((t (:inherit markdown-header-face :height 1.3))))
   '(markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.2))))
   '(markdown-header-face-3 ((t (:inherit markdown-header-face :height 1.1))))
   '(markdown-header-face-4 ((t (:inherit markdown-header-face :height 1.0))))
   '(markdown-header-face-5 ((t (:inherit markdown-header-face :height 1.0))))
   '(markdown-header-face-6 ((t (:inherit markdown-header-face :height 1.0)))))
#+end_src

* 笔记搜索设置
设置插件deft。
设置搜索笔记的文件夹位置，以及让其搜索文件夹中子文件夹。
#+begin_src emacs-lisp
  (setq deft-extensions '("txt" "tex" "org" "md"))
  (setq deft-directory "~/Documents/Notes")
  (setq deft-recursive t)
#+end_src

* shell格式化设置
我已经忘了我为什么要设置这个。
似乎是不设置会报错。
#+begin_src emacs-lisp
  (use-package sh-script
    :config
    (set-formatter! 'shfmt
      '("shfmt" "-ci"
        ("-i" "%d" (unless indent-tabs-mode tab-width))
        ("-ln" "%s" (pcase sh-shell (`bash "bash") (`zsh "bash") (`mksh "mksh") (_ "posix")))))
    )
#+end_src
