#+title: Samb's Doom Emacs Config
#+author: Samb

* 基础行为 & 变量
** Server
#+begin_src emacs-lisp
  (server-start)
#+end_src

** 你的名字
#+begin_src emacs-lisp
  (setq user-full-name "Jie Samb"
        user-mail-address "samb233@hotmail.com")
#+end_src

** 文件编码
将文件编码全部设定为utf-8-unix
#+begin_src emacs-lisp
  (setq-default buffer-file-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8-unix)
  (prefer-coding-system 'utf-8-unix)
#+end_src

** 窗口大小 & 名称
设置窗口的大小。
我喜欢用较小的窗口记笔记，所以设置的80列50行。写代码是最大化窗口即可。
#+begin_src emacs-lisp
  (pushnew! default-frame-alist '(width . 80) '(height . 50))
  ;; (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

设置窗口透明度。
设置alpha是调用系统窗口混合器来实现半透明，文字和图片也会半透明化
而alpha-background是emacs29新引入的特性，只半透明背景，不会半透明文字和图片。
#+begin_src emacs-lisp
  ;; (add-to-list 'default-frame-alist '(alpha-background . 95))
  ;; (add-to-list 'default-frame-alist (cons 'alpha 90))
#+end_src

设置标题栏名称。
我将其设置为文件路径。
#+begin_src emacs-lisp
  (setq frame-title-format
        '((:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name))
                   "%b"))))
#+end_src

* 基础外观
** 字体
设置字体与字体大小。
使用after-setting-font-hook来设置中文字体
#+begin_src emacs-lisp
  (setq doom-font (font-spec :family "Iosevka" :weight 'medium :size 13.0))

  (defun my-cjk-font()
    (dolist (charset '(kana han cjk-misc symbol bopomofo))
      (set-fontset-font t charset (font-spec :family "Sarasa Mono SC"))))

  (add-hook 'after-setting-font-hook #'my-cjk-font)
#+end_src

** 主题
#+begin_src emacs-lisp
  (setq doom-theme 'doom-tomorrow-day)
#+end_src

** doom-modeline
简洁一点，去掉部分图标
#+begin_src emacs-lisp
  (after! doom-modeline
    (setq doom-modeline-modal t
          doom-modeline-modal-icon nil
          doom-modeline-buffer-encoding t
          doom-modeline-vcs-max-length 20
          doom-modeline-height 28
          doom-modeline-buffer-modification-icon nil
          doom-modeline-buffer-state-icon nil)
    (set-face-attribute 'mode-line-active nil :background "#f4f4f4"))
#+end_src

设置buffer name重复时的处理。
在前面添加路径
#+begin_src emacs-lisp
  (setq uniquify-buffer-name-style 'forward)
#+end_src

** 行号
更改行号的字重，不然在不高的分辨率下会有锯齿
#+begin_src emacs-lisp
  (custom-set-faces
   '(line-number ((t (:weight medium))))
   '(line-number-current-line ((t (:weight medium)))))
#+end_src

** 各类popup
错误弹窗
#+begin_src emacs-lisp
  (set-popup-rule! "^\\*format-all-errors*" :size 0.15 :select nil :modeline nil :quit t)
#+end_src

* 基础按键
设置鼠标滚动。
#+begin_src emacs-lisp
  (setq scroll-margin 9)
  (setq mouse-wheel-scroll-amount '
        (3
         ((shift) . hscroll)
         ((meta))
         ((control) . text-scale)))
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse t) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
#+end_src

emacs29新加入的像素滚动模式。
mac上适配很好，很有用
linux上就一般般，还是不开习惯
#+begin_src emacs-lisp
  ;; (pixel-scroll-precision-mode t)
#+end_src

设置visual模式下Shift-j和Shift-k上下移动代码块
#+begin_src emacs-lisp
  (evil-define-key 'visual 'global
    (kbd "J") 'drag-stuff-down
    (kbd "K") 'drag-stuff-up)
#+end_src

取消按键宏。
我用不上vim的按键宏功能。
但他总是在我狂按q是弹出来，很烦。
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global (kbd "q") nil)
#+end_src

设置:q命令只关闭buffer，不关闭emacs，关闭时，输入:quit
#+begin_src emacs-lisp
  (evil-ex-define-cmd "q" 'kill-this-buffer)
  (evil-ex-define-cmd "Q" 'kill-this-buffer)
  (evil-ex-define-cmd "quit" 'evil-quit)
#+end_src

使用consult-line替代I-search
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global (kbd "C-s") 'consult-line)
  (map! "C-s" #'consult-line)
#+end_src

设置Ctrl-v和Alt-v粘贴
#+begin_src emacs-lisp
  (map! "C-v" #'yank)
  (map! "M-v" #'yank)
#+end_src

设置Ctrl-z撤销，Ctrl-Z重做
#+begin_src emacs-lisp
  (evil-define-key 'insert 'global (kbd "C-z") 'undo-only)
  (evil-define-key 'normal 'global (kbd "C-z") 'undo-only)
  (evil-define-key 'insert 'global (kbd "C-S-z") 'undo-redo)
  (evil-define-key 'normal 'global (kbd "C-S-z") 'undo-redo)
  (evil-define-key 'normal 'global (kbd "U") 'evil-redo)
#+end_src

设置]e [e跳转错误
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global (kbd "] e") 'flymake-goto-next-error)
  (evil-define-key 'normal 'global (kbd "[ e") 'flymake-goto-prev-error)
#+end_src

设置鼠标侧键跳转
#+begin_src emacs-lisp
  (map! :n "<mouse-8>" #'better-jumper-jump-backward
        :n "<mouse-9>" #'better-jumper-jump-forward)
#+end_src

设置format-buffer的快捷键
#+begin_src emacs-lisp
  (map! :leader
        :desc "format buffer" "b f" #'+format/buffer)
#+end_src

设置书签列表快捷键
#+begin_src emacs-lisp
  (map! :leader
        :desc "bookmark list" "b w" #'list-bookmarks
        :desc "bookmark jump other window" "b o" #'bookmark-jump-other-window)
#+end_src

设置在另一个窗口中打开defination
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global (kbd "g D") 'xref-find-definitions-other-window)
#+end_src

取消doom中设置的一些快捷键。
以及取消一些关于emacs配置文件的快捷键
我可能有一些洁癖，就是不喜欢见到这些我不会用到的快捷键。
其他软件里我可能拿他们没办法，但在emacs里我可以当家作主，全部取消！
#+begin_src emacs-lisp
  (map! :leader
        "i e" nil
        "f c" nil
        "n d" nil
        "f e" nil
        "f E" nil
        "f p" nil
        "f P" nil
        "o d" nil
        "s e" nil
        "s t" nil)
#+end_src

* 基础插件
** undo
默认的undo行为在我看来不能适应。
好在emacs28后有了undo-only和undo-redo。
显示指定一下evil的undo。
#+begin_src emacs-lisp
  (setq undo-no-redo t)
  (setq evil-want-fine-undo t)
  (setq evil-undo-system 'undo-redo
        evil-undo-function 'undo-only
        evil-redo-function 'undo-redo)
#+end_src

** projectile
修改projectile查找project-root的方式
先从上到下，后从下到上。
#+begin_src emacs-lisp
  (after! projectile
    (add-to-list 'projectile-project-root-files "go.mod")
    (setq projectile-project-root-functions '(projectile-root-local
                                              projectile-root-marked
                                              projectile-root-top-down
                                              projectile-root-bottom-up
                                              projectile-root-top-down-recurring)))

  (defun project-projectile (dir)
    "Return Projectile project of form ('projectile . root-dir) for DIR."
    (let ((root (projectile-project-root dir)))
      (when root
        (cons 'projectile root))))
  (setq project-find-functions '(project-projectile project-try-vc))
#+end_src

** recentf
设置recentf最大储存项
doom默认的200个也太少了，至少1000吧
#+begin_src emacs-lisp
  (after! recentf
    :config
    (setq recentf-max-saved-items 1000))
#+end_src

** evil
设置各个模式的tags。
会显示在doom-modelien上。
设置成全名，让我有种在vim的熟悉感，非常爽。
#+begin_src emacs-lisp
  (after! evil
    (setq evil-emacs-state-tag "EMACS")
    (setq evil-insert-state-tag "INSERT")
    (setq evil-motion-state-tag "MOTION")
    (setq evil-normal-state-tag "NORMAL")
    (setq evil-replace-state-tag "REPLACE")
    (setq evil-operator-state-tag "OPERATOR")
    (setq evil-visual-char-tag "VISUAL")
    (setq evil-visual-line-tag "V-LINE")
    (setq evil-visual-block-tag "V-BLOCK")
    (setq evil-visual-screen-line-tag "V-SCREEN")
    )
#+end_src

** magit
设置clone的默认文件夹
#+begin_src emacs-lisp
  (setq magit-clone-default-directory "~/Codes/Lab/")
#+end_src

* 代码补全
我使用eglot+corfu的组合。尽量多的利用emacs已经合并的插件。
** eglot
#+begin_src emacs-lisp
  (after! eglot
    (setq eglot-events-buffer-size 0)
    (setq eglot-stay-out-of nil)
    (setq eglot-ignored-server-capabilities '(:inlayHintProvider))
    (setq eglot-workspace-configuration '(:gopls (:usePlaceholders t)))
    (map! :leader
           :desc "LSP start/restart" "c S" #'eglot
           :desc "LSP reconnect" "c R" #'eglot-reconnect
           :desc "LSP rename" "c n" #'eglot-rename
           :desc "Jump to references" "c r" #'+lookup/references)
    (set-popup-rule! "^\\*eglot-help" :size 0.3 :quit t :select nil)
    (set-face-attribute 'eglot-highlight-symbol-face nil :background "#d6d4d4"))
#+end_src

** corfu
#+begin_src emacs-lisp
  (after! corfu
    (setq corfu-auto-prefix 1
          corfu-auto-delay 0.1
          corfu-popupinfo-max-height 20
          corfu-count 10
          cape-dict-file "~/.doom.d/dict/words")
    (map! :map corfu-map
          :i "C-j" #'corfu-next
          :i "C-k" #'corfu-previous
          :i "C-l" #'corfu-insert-separator
          :i "C-i" #'corfu-info-documentation
          :i "C-g" #'corfu-quit)
    (map! :i "C-S-p" #'cape-file)
    (add-hook! 'evil-insert-state-exit-hook #'corfu-quit)
    (use-package! kind-all-the-icons)
    (add-to-list 'corfu-margin-formatters #'kind-all-the-icons-margin-formatter))
#+end_src

** flymake
flymake和eglot一起用时就不用设置什么了
#+begin_src emacs-lisp
  (use-package! flymake
    :commands (flymake-mode)
    :hook ((prog-mode text-mode) . flymake-mode)
    :config
    (setq flymake-fringe-indicator-position 'right-fringe)
    (setq flymake-no-changes-timeout 1.0)
    (set-popup-rule! "^\\*Flymake diagnostics" :size 0.2 :modeline nil :quit t :select nil))
#+end_src

** eldoc
设置eldoc buffer为popup
也可以配置flymake约eldoc同时显示，见[[https://github.com/joaotavora/eglot/issues/1171][issue]]， 但我不喜欢这种形式
#+begin_src emacs-lisp
  (setq eldoc-echo-area-display-truncation-message nil)
  (setq eldoc-echo-area-use-multiline-p nil)
  (set-popup-rule! "^\\*eldoc*" :size 0.15 :modeline nil :quit t)
  #+end_src

** yasnippet
兼容yas和corfu的tab
#+begin_src emacs-lisp
  (after! yasnippet
    (defun my-corfu-frame-visible-h ()
      (and (frame-live-p corfu--frame) (frame-visible-p corfu--frame)))
    (add-hook 'yas-keymap-disable-hook #'my-corfu-frame-visible-h))
#+end_src

* 文件管理
** dired
由于我取消勾选了doom的dired模块，所以需要自己设置一些dired的选项。
#+begin_src emacs-lisp
  (use-package! dired
    :commands dired-jump
    :hook
    (dired-mode . dired-omit-mode)
    (dired-mode . dired-async-mode)
    :init
    (setq dired-dwim-target t
          dired-hide-details-hide-symlink-targets nil
          dired-recursive-copies  'always
          dired-recursive-deletes 'always
          dired-create-destination-dirs 'ask
          dired-clean-confirm-killing-deleted-buffers nil)
    :config
    (setq dired-async-skip-fast t)
    (setq dired-omit-files
          (concat "\\`[.][.]?\\'"
                  "\\|^\\.DS_Store\\'"
                  "\\|^\\.project\\(?:ile\\)?\\'"
                  "\\|^\\.\\(?:svn\\|git\\)\\'"
                  "\\|^\\.ccls-cache\\'"
                  "\\|\\(?:\\.js\\)?\\.meta\\'"
                  "\\|\\.\\(?:elc\\|o\\|pyo\\|swp\\|class\\)\\'"))
    (map! :map dired-mode-map
          :ng "q" #'quit-window )
    (custom-set-faces '(dired-async-message ((t (:inherit success))))))
#+end_src

** dirvish
Dirvish真是接近完美的文件管理器。除了鼠标操作比较难受外，处处让我感到满足。
#+begin_src emacs-lisp
  (use-package! dirvish
    :defer t
    :init (after! dired (dirvish-override-dired-mode))
    :custom
    (dirvish-quick-access-entries ; It's a custom option, `setq' won't work
     '(("h" "~/"                          "Home")
       ("c" "~/Codes/"                    "Codes")
       ("D" "~/Documents/"                "Documents")
       ("w" "~/Works/"                    "Works")
       ("d" "~/Downloads/"                "Downloads")
       ("P" "~/Pictures/"                 "Pictures")
       ("v" "~/Videos/"                   "Videos")
       ("s" "~/Shared/"                   "Shared")
       ("n" "~/Notes/"                    "Notes")
       ("b" "~/Books/"                    "Books")
       ("M" "/mnt/"                       "Drives")
       ("T" "~/.local/share/Trash/files/" "TrashCan")
       ))
    :config
    ;; (dirvish-peek-mode) ; Preview files in minibuffer
    (dirvish-side-follow-mode) ; similar to `treemacs-follow-mode'
    ;; (setq dirvish-reuse-session nil) ; disable session reuse
    ;; (setq dirvish--debouncing-delay 2)
    (setq dirvish-async-listing-threshold 10000)
    (setq dirvish-redisplay-debounce 0.01)
    (setq dirvish-use-mode-line nil)
    ;; (setq dirvish-default-layout '(0 0.5 0.5))
    ;; (setq dirvish-mode-line-format
    ;;       '(:left (sort symlink) :right (omit yank index)))
    (setq dirvish-header-line-height '41)
    ;; (setq dirvish-mode-line-height '46)
    (setq dirvish-attributes
          '(file-time all-the-icons file-size collapse subtree-state vc-state git-msg))
    (setq dirvish-all-the-icons-height 0.9)
    (setq delete-by-moving-to-trash t)
    (setq dired-listing-switches
          "-l --almost-all --human-readable --group-directories-first --no-group --time-style=iso")
    (setq dirvish-fd-default-dir "/home/jiesamb/")
    (setq dirvish-open-with-programs
          `(
            (,dirvish-audio-exts . ("mpv" "%f"))
            (,dirvish-video-exts . ("mpv" "%f"))
            (,dirvish-image-exts . ("eog" "%f"))
            (("doc" "docx") . ("wps" "%f"))
            (("ppt" "pptx") . ("wpp" "%f"))
            (("xls" "xlsx") . ("et" "%f"))
            (("pdf") . ("evince" "%f"))
            (("odt" "ods" "rtf" "odp") . ("libreoffice" "%f"))
            (("epub") . ("koodo-reader" "%f"))
            ))
    (setq dirvish-emerge-groups
    '(("24h" (predicate . recent-files-today))
       ("文档" (extensions "pdf" "epub" "doc" "docx" "xls" "xlsx" "ppt" "pptx"))
       ("视频" (extensions "mp4" "mkv" "webm"))
       ("图片" (extensions "jpg" "png" "svg" "gif"))
       ("音频" (extensions "mp3" "flac" "wav" "ape" "m4a" "ogg"))
       ("压缩包" (extensions "gz" "rar" "zip" "7z" "tar" "z"))))
    (setq dirvish-header-line-format '(:left (path) :right (yank sort index " ")))
    (setq dirvish-path-separators (list "  ~" "  " "/"))
    (setq dirvish-side-display-alist `((side . right) (slot . -1)))
    (setq dirvish-side-width 40)
    (setq dirvish-subtree-file-viewer 'dired-find-file)
    (setq dirvish-side-auto-close t)
    (map! :map dirvish-mode-map
          :n "h" #'dired-up-directory
          :n "l" #'dired-find-file
          :n "e" #'dired-create-empty-file
          :n "." #'dired-omit-mode
          :n "C-." #'dirvish-emerge-mode
          :n "q" #'dirvish-quit
          :n "s" #'dirvish-quicksort
          :n "a" #'dirvish-quick-access
          :n "F" #'dirvish-fd
          :n "S" #'dirvish-fd-switches-menu
          :n "y" #'dirvish-yank-menu
          :n "f" #'dirvish-file-info-menu
          :n "H" #'dirvish-history-jump
          :n "TAB" #'dirvish-subtree-toggle
          :n [backtab] #'dirvish-subtree-up
          :n "<mouse-1>" #'dirvish-subtree-toggle
          :n "<mouse-2>" #'dirvish-subtree-toggle
          :n "<mouse-3>" #'dired-find-file
          :n "<mouse-8>" #'dired-up-directory
          :n "<mouse-9>" #'dired-find-file
          :n "<double-mouse-1>" #'dired-find-file
          :n "<double-mouse-3>" #'dired-up-directory
          "M-t" #'dirvish-layout-toggle
          "M-j" #'dirvish-fd-jump
          "M-m" #'dirvish-mark-menu ))
#+end_src

以及一些相关的常用操作，我将其绑定到SPC-v-...中
#+begin_src emacs-lisp
  (map! :leader
        :desc "Open dired" "N" #'dired-jump
        :desc "Open dirvish" "V" #'dirvish
        (:prefix ("v" . "my personal bindings")
         :desc "Open dirvish" "v" #'dirvish
         :desc "Open Normal Dired" "n" #'dired-jump
         :desc "Quit dirvish" "q" #'dirvish-quit
         :desc "Toggle dirvish-side" "s" #'dirvish-side
         :desc "Fd in dirvish" "F" #'dirvish-fd
         :desc "Jump using fd" "J" #'dirvish-fd-jump
         :desc "Jump recent dir" "j" #'consult-dir
         :desc "Fd find file in dir" "f" #'+vertico/consult-fd
         :desc "find Item in the buffer" "i" #'consult-imenu
         :desc "open with other coding system" "c" #'revert-buffer-with-coding-system
         :desc "change buffer coding system" "C" #'set-buffer-file-coding-system
         :desc "List processes" "l" #'list-processes
         :desc "VC Refresh state" "r" #'vc-refresh-state))
#+end_src

* 终端
使用性能更好的vterm
#+begin_src emacs-lisp
  (setq vterm-always-compile-module t)
  (after! vterm
    (setq vterm-max-scrollback 10000)
    (setq vterm-timer-delay 0.01)
    (advice-add #'vterm--redraw :after (lambda (&rest args) (evil-refresh-cursor evil-state)))
    (set-face-attribute 'vterm-color-black nil :background "#a7a7a7"))
#+end_src

解决vterm的两个问题
1. 光标鬼畜
2. 一直问我要不要关闭（废话我都:q了当然要）
#+begin_src emacs-lisp
  (setq-hook! 'vterm-mode-hook
    +popup-margin-width nil
    kill-buffer-query-functions nil)
#+end_src

使用自定义的vterm-toggle。
doom默认的vterm-toggle是一个workspace一个。我想要一个文件夹一个。
#+begin_src emacs-lisp
  (use-package! doom-vterm-toggle
    :commands (doom-vterm-toggle-directory
               doom-vterm-toggle-project))

  (map! :map vterm-mode-map [f4] nil)
  (map! [f4] #'doom-vterm-toggle-directory
        [S-f4] #'+vterm/here
        :leader
        "o t" #'doom-vterm-toggle-project)
#+end_src

* 输入法
** sis
配置中英文输入法自动切换。
#+begin_src emacs-lisp
  (use-package! sis
    :config
    (sis-ism-lazyman-config "1" "2" 'fcitx5)
    (sis-global-respect-mode t)
    (sis-global-context-mode t))
#+end_src

* Org-Mode
** word-wrap
关闭。中英文一起时word-wrap只会是副作用。
#+begin_src emacs-lisp
  (add-hook! 'org-mode-hook (setq-local word-wrap nil))
#+end_src

** 基本外观
配置一下Org-Mode的主题颜色、字体大小等。
最后一行用于设置org-mode的代码块，使其能有代码缩进，更好看些。
另外做个备忘，org-mode中提升标题等级是M+左箭头，降低是M+右箭头。
#+begin_src emacs-lisp
  (setq org-directory "~/Notes")
  (custom-set-faces
   '(org-level-1 ((t (:height 1.3 :foreground "#4271ae" :weight ultra-bold))))
   '(org-level-2 ((t (:height 1.2 :foreground "#8959a8" :weight extra-bold))))
   '(org-level-3 ((t (:height 1.1 :foreground "#b5bd68" :weight bold))))
   '(org-level-4 ((t (:height 1.0 :foreground "#e6c547" :weight semi-bold))))
   '(org-level-5 ((t (:height 1.0 :foreground "#c82829" :weight normal))))
   '(org-level-6 ((t (:height 1.0 :foreground "#70c0ba" :weight normal))))
   '(org-level-7 ((t (:height 1.0 :foreground "#b77ee0" :weight normal))))
   '(org-level-8 ((t (:height 1.0 :foreground "#9ec400" :weight normal)))))

  (after! org
    (setq org-src-preserve-indentation nil)
    (setq org-image-actual-width 500)
    (map! :map org-mode-map
          :localleader
          "-" #'org-emphasize))
#+end_src

** org-modern
使用org-modern美化org
#+begin_src emacs-lisp
  (use-package! org-modern
    :commands (org-modern-mode)
    :init
    (setq org-modern-block-name nil)
    (setq org-modern-star '("◉" "○" "✸" "✿" "◈" "◇")))

  (add-hook 'org-mode-hook #'org-modern-mode)
#+end_src

** org-appear
#+begin_src emacs-lisp
  (use-package! org-appear
    :commands (org-appear-mode)
    :init
    (setq org-appear-autolinks t))

  (add-hook 'org-mode-hook #'org-appear-mode)
#+end_src

** org-roam
设置笔记文件夹
#+begin_src emacs-lisp
  (setq org-roam-directory "~/Notes/Roam")
  (map! :leader
        :desc "Zettelkasten with org-roam" "v z" #'org-roam-node-find
        :desc "org-roam node Insert" "v i" #'org-roam-node-insert)
#+end_src

禁用补全
#+begin_src emacs-lisp
  (after! org-roam
    (setq org-roam-completion-everywhere nil))
#+end_src

日志模板。
主要是使用模板设置保存的文件夹，来兼容我以前的日志模式。
我希望我创建日志的时候能一键弹出，而不用选择模板什么的，所以只设置一个模板。
#+begin_src emacs-lisp
  (setq org-roam-dailies-directory "~/Notes/Daily")
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %?"
           :target (file+head "%<%Y>/%<%Y-%m>/%<%Y-%m-%d>.org"
                              "#+title: %<%Y-%m-%d %A>\n"))))
  (map! :leader
        :desc "my Journal today" "J" #'org-roam-dailies-goto-today
        :desc "org-roam capture" "X" #'org-roam-capture
        :desc "org-roam find node" "Z" #'org-roam-node-find)
#+end_src

设置模板
同样，也是通过模板来设置保存的文件夹。
org-roam默认将文件堆在一个文件夹下我是不太喜欢的。
#+begin_src emacs-lisp
  (setq org-roam-capture-templates '(
            ("d" "Default" plain "%?"
            :target (file+head "Default/%<%Y%m%d%H%M%S>-${slug}.org"
                                "#+title: ${title}\n#+filetags: \n\n")
            :unnarrowed t)
            ("l" "Learning" plain "%?"
            :target (file+head "Learning/%<%Y%m%d%H%M%S>-${slug}.org"
                                "#+title: ${title}\n#+filetags: :learning: \n\n")
            :unarrowed t)
            ("r" "Reading" plain "%?"
            :target (file+head "Reading/%<%Y%m%d%H%M%S>-${slug}.org"
                                "#+title: ${title}\n#+filetags: :reading: \n\n")
            :unnarrowed t)
            ("t" "Thinking" plain "%?"
            :target (file+head "Thinking/%<%Y%m%d%H%M%S>-${slug}.org"
                                "#+title: ${title}\n#+filetags: :thinking: \n\n")
            :unnarrowed t)
            ("w" "Working" plain "%?"
            :target (file+head "Working/%<%Y%m%d%H%M%S>-${slug}.org"
                                "#+title: ${title}\n#+filetags: :working: \n\n")
            :unnarrowed t)
            ("c" "Coding" plain "%?"
            :target (file+head "Coding/%<%Y%m%d%H%M%S>-${slug}.org"
                                "#+title: ${title}\n#+filetags: :coding: \n\n")
            :unnarrowed t)))
#+end_src

* 常用语言mode
** markdown-mode
也是设置一下字体大小和颜色。
在emacs下我也很少写markdown了。
#+begin_src emacs-lisp
  (custom-set-faces
   '(markdown-code-face ((t (:background "#f5f5f5"))))
   '(markdown-header-delimiter-face ((t (:foreground "#616161" :height 0.9))))
   '(markdown-header-face-1 ((t (:inherit markdown-header-face :height 1.3 :foreground "#4271ae" :weight ultra-bold))))
   '(markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.2 :foreground "#8959a8" :weight extra-bold))))
   '(markdown-header-face-3 ((t (:inherit markdown-header-face :height 1.1 :foreground "#b5bd68" :weight bold))))
   '(markdown-header-face-4 ((t (:inherit markdown-header-face :height 1.0 :foreground "#e6c547" :weight semi-bold))))
   '(markdown-header-face-5 ((t (:inherit markdown-header-face :height 1.0 :foreground "#c82829" :weight normal))))
   '(markdown-header-face-6 ((t (:inherit markdown-header-face :height 1.0 :foreground "#70c0ba" :weight normal))))
   '(markdown-header-face-7 ((t (:inherit markdown-header-face :height 1.0 :foreground "#b77ee0" :weight normal)))))

  (after! markdown-mode
    (setq markdown-fontify-code-blocks-natively t)
    (setq markdown-fontify-whole-heading-line nil)
    (setq markdown-max-image-size '(500 . 500))
    (set-popup-rule! "^\\*edit-indirect" :size 0.42 :quit nil :select t :autosave t :modeline t :ttl nil))
#+end_src

** go-mode
开启lsp的自动import和format。
因为在开启lsp的情况下，go-mode的这部分功能被关闭了，全部交给了gopls。
#+begin_src emacs-lisp
  (defun my-eglot-organize-imports ()
    (ignore-errors(call-interactively 'eglot-code-action-organize-imports)))
  (defun my-go-mode-init ()
    (add-hook 'before-save-hook #'eglot-format-buffer -10 t)
    (add-hook 'before-save-hook #'my-eglot-organize-imports nil t))
  (add-hook 'go-mode-hook #'my-go-mode-init)
#+end_src

禁用没用的快捷键，以免按错
#+begin_src emacs-lisp
  (after! go-mode
    (map! :map go-mode-map
          :localleader
          "h" nil
          "e" nil
          "i" nil
          (:prefix ("i" . "imports")
                   "i" #'go-goto-imports
                   "a" #'go-import-add
                   "r" #'go-remove-unused-imports)))
#+end_src

** protobuf-mode
#+begin_src emacs-lisp
  (use-package protobuf-mode
    :commands (protobuf-mode)
    :mode("\\.proto\\'" . protobuf-mode))
#+end_src

** shell
设置shell的formatter
我已经忘了我为什么要设置这个。
似乎是不设置会报错。
#+begin_src emacs-lisp
  (after! sh-script
    (set-formatter! 'shfmt
      '("shfmt" "-ci"
        ("-i" "%d" (unless indent-tabs-mode tab-width))
        ("-ln" "%s" (pcase sh-shell (`bash "bash") (`zsh "bash") (`mksh "mksh") (_ "posix"))))))
#+end_src

** .vpy文件
设置用python-mode打开vpy文件
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.vpy\\'" . python-mode))
#+end_src

* 工具包
** bookmark-view
#+begin_src emacs-lisp
  (use-package! bookmark-view
    :commands (bookmark-view))

  (map! :leader
        :desc "bookmark view" "b v" #'bookmark-view)
#+end_src

** 单词翻译
#+begin_src emacs-lisp
  (use-package! fanyi
    :commands (fanyi-dwim
               fanyi-dwim2)
    :custom
    (fanyi-providers '(;; 海词
                       fanyi-haici-provider
                       ;; 有道同义词词典
                       fanyi-youdao-thesaurus-provider
                       ;; Etymonline
                       ;; fanyi-etymon-provider
                       ;; Longman
                       ;; fanyi-longman-provider
                       )))

  (set-popup-rule! "^\\*fanyi*" :size 0.3 :modeline nil :quit t)
  (add-hook 'fanyi-mode-hook #'doom-disable-line-numbers-h)
  (map! :leader
        :desc "Translate word" "v t" #'fanyi-dwim2)
#+end_src

** restclient
配置restclient，使之与vscode的restclient兼容。
代码来源：[[https://github.com/yurifrl/restclient/blob/b025b6f87fb85a3e6471e475aca8ffb7005f6163/restclient.el#LL187C1-L201C1][restclient-vscode-compatible]]
#+begin_src emacs-lisp
  (after! restclient
    (setq restclient-use-var-regexp
          "{{\([^{ \n]+\)}}$")
    (setq restclient-var-regexp
          (concat "^\\(@[^@= ]+\\)[ \t]*\\(:?\\)=[ \t]*\\(<<[ \t]*\n\\(\\(.*\n\\)*?\\)" restclient-comment-separator "\\|\\([^<].*\\)$\\)"))
    (setq restclient-svar-regexp
          "^\\(@[^@= ]+\\)[ \t]*=[ \t]*\\(.+?\\)$")
    (setq restclient-evar-regexp
          "^\\(@[^@ ]+\\)[ \t]*:=[ \t]*\\(.+?\\)$")
    (setq restclient-mvar-regexp
          "^\\(@[^@ ]+\\)[ \t]*:?=[ \t]*\\(<<\\)[ \t]*$"))
#+end_src
