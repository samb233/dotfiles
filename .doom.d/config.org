#+title: Samb's Doom Emacs Config
#+author: Samb

* 基本设置
** 文件编码
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8-unix)
#+end_src

** 窗口
设置标题栏名称。
我将其设置为文件路径。
#+begin_src emacs-lisp
  (setq frame-title-format
        '((:eval (if (buffer-file-name)
                     (concat "Editor Macross > "
                             (abbreviate-file-name (buffer-file-name))
                             (if (buffer-modified-p) " *"))
                   (if (equal major-mode #'dired-mode)
                       (concat "Editor Macross > " default-directory)
                     "Editor Macross")))))
#+end_src

** auth-save
不让emacs保存auth信息
#+begin_src emacs-lisp
  (setq auth-source-save-behavior nil)
#+end_src

** 启动
让doom在启动时不再显示加载了多少包
这能使我更专注与使用而不是折腾插件
#+begin_src emacs-lisp
  (remove-hook! 'doom-after-init-hook #'doom-display-benchmark-h)
#+end_src

** buffer-name
设置buffer name重复时的处理。
在前面添加路径
#+begin_src emacs-lisp
  (setq uniquify-buffer-name-style 'forward)
#+end_src

** native-comp
关闭native-comp
#+begin_src emacs-lisp
  ;; (setq native-comp-jit-compilation nil)
#+end_src

** word-wrap
#+begin_src emacs-lisp
  (setq word-wrap-by-category t)
#+end_src

** input-method
#+begin_src emacs-lisp
  ;; (setq x-gtk-use-native-input nil)
#+end_src

* 外观
** 字体
设置字体与字体大小。
使用after-setting-font-hook来设置中文字体
#+begin_src emacs-lisp
  (setq doom-font (font-spec :family "iosevka nerd font mono" :size 11.0))
  (setq doom-emoji-font (font-spec :family "Noto Color Emoji"))
  ;; (setq doom-unicode-font (font-spec :family "BlexMono Nerd Font"))
  (setq doom-variable-pitch-font (font-spec :family "霞鹜文楷等宽"))

  (defun my-cjk-font()
    (dolist (charset '(kana han cjk-misc bopomofo))
      (set-fontset-font t charset (font-spec :family "霞鹜文楷等宽"))))

  (add-hook 'after-setting-font-hook #'my-cjk-font)
#+end_src

** 行号
使用相对行号。
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
#+end_src

** 主题
#+begin_src emacs-lisp
  (setq doom-theme 'doom-tomorrow-day)
#+end_src

** modeline
自定义 doom 的 +light modeline
#+begin_src emacs-lisp
  (use-package! doom-light-modeline-enhance)
  (setq +modeline-height 20
        +modeline-bar-width 4)
  (remove-hook '+popup-buffer-mode-hook #'+popup-set-modeline-on-enable-h)
  (remove-hook '+popup-buffer-mode-hook #'+popup-unset-modeline-on-disable-h)

  (add-hook! 'doom-init-ui-hook (set-face-attribute 'mode-line nil :background "#eef4f9"))

  (after! solaire-mode
    (dolist (face '(mode-line mode-line-inactive))
      (setf (alist-get face solaire-mode-remap-alist) nil)))
#+end_src

* 按键
** 鼠标
滚轮
#+begin_src emacs-lisp
  (setq mouse-wheel-progressive-speed nil
        scroll-preserve-screen-position nil)

  (use-package! ultra-scroll
    :init
    (setq scroll-conservatively 101
          scroll-margin 0)
    :config
    (ultra-scroll-mode 1))
#+end_src

emacs29新加入的像素滚动模式。
并且设置evil-move-beyond-eol，来让光标不乱跳，并解决图片偶尔卡住的bug
#+begin_src emacs-lisp
  ;; (pixel-scroll-precision-mode t)

  (map! :n "<mouse-8>" #'better-jumper-jump-backward
        :n "<mouse-9>" #'better-jumper-jump-forward)
#+end_src

** 键位设置
#+begin_src emacs-lisp
  (map! :ig "C-v"       #'yank
        :ig "M-v"       #'yank
        :ig "M-p"       #'yas-insert-snippet
        :nv "C-/"       #'comment-line
        :v  "J"         #'drag-stuff-down
        :v  "K"         #'drag-stuff-up
        :nv "R"         #'query-replace
        :ni "C-s"       #'consult-line
        :ni "C-z"       #'undo-only
        :ni "C-S-z"     #'undo-redo
        :nv "g r"       #'+lookup/references
        :n  "q"         #'doom/escape
        :n  "U"         #'evil-redo
        :n  "s"         #'avy-goto-char-2
        :n  "] e"       #'flymake-goto-next-error
        :n  "[ e"       #'flymake-goto-prev-error
        :n  "] w"       #'evil-window-next
        :n  "[ w"       #'evil-window-prev
        :v  "<mouse-3>" #'kill-ring-save
        :leader
        :desc "consult buffer other window" "w ," #'consult-buffer-other-window
        :desc "find-file other window"      "w ." #'find-file-other-window
        :desc "dired jump" ">" #'dired-jump
        :desc "vertico project in cwd" "?" #'+vertico/project-search-from-cwd
        :desc "jump to references" "c r" #'+lookup/references
        :desc "format buffer" "b f" #'+format/buffer
        :desc "bookmark list" "b w" #'list-bookmarks
        :desc "consult compile errors" "c X" #'consult-compile-error)

  (map! :after evil-snipe
        (:map evil-snipe-local-mode-map
         :mn "s" nil
         :mn "S" nil))
#+end_src

设置avy-goto-char-2-all-window
#+begin_src emacs-lisp
  (defun avy-goto-char-2-all-window()
    (interactive)
    (let ((avy-all-windows t))
      (call-interactively 'avy-goto-char-2)))

  (map! :n "S" #'avy-goto-char-2-all-window)
#+end_src

设置evil搜索时粘贴的快捷键
#+begin_src emacs-lisp
  (map! :map evil-ex-search-keymap
        "C-v" #'yank
        "C-q" #'quoted-insert)
#+end_src

设置vertico中Ctrl-Enter和Enter的功能一致。经常会不小心按错
#+begin_src emacs-lisp
  (map! :map vertico-map
        :g "C-<return>" #'exit-minibuffer)
#+end_src

以及文件管理相关的键位
#+begin_src emacs-lisp
  (map! :leader
        (:prefix ("v" . "my personal bindings")
         :desc "Open dirvish" "v" #'dirvish
         :desc "Toggle dirvish-side" "s" #'dirvish-side
         :desc "Fd in dirvish" "F" #'dirvish-fd-ask
         :desc "Jump using fd" "J" #'dirvish-fd-jump
         :desc "Jump recent dir" "j" #'consult-dir
         :desc "Fd find file in dir" "f" #'+vertico/consult-fd-or-find
         :desc "find Item in the buffer" "i" #'consult-imenu
         :desc "open with other coding system" "c" #'revert-buffer-with-coding-system
         :desc "change buffer coding system" "C" #'set-buffer-file-coding-system
         :desc "List processes" "l" #'list-processes
         :desc "toggle eldoc buffer" "h" #'eldoc
         :desc "VC Refresh state" "r" #'vc-refresh-state))
#+end_src

并且取消doom设置的一些我用不到的键位
#+begin_src emacs-lisp
  (map! :leader
        "i e" nil
        "n d" nil
        "b u" nil
        "s e" nil
        "s t" nil
        "h g" nil)
#+end_src

** evil-cmd
设置:q命令只关闭buffer，不关闭emacs，关闭时，输入:qa
#+begin_src emacs-lisp
  (evil-ex-define-cmd "q" 'kill-this-buffer)
  (evil-ex-define-cmd "Q" 'kill-this-buffer)
  (evil-ex-define-cmd "qa" 'evil-quit)
  (evil-ex-define-cmd "W" 'save-buffer)
#+end_src

** move-text
上下移动行。
#+begin_src emacs-lisp
  (use-package! drag-stuff
    :commands (drag-stuff-up
               drag-stuff-down)
    :init
    (map! :v "K"  #'drag-stuff-up
          :v "J"  #'drag-stuff-down))
#+end_src

* 基础插件
** undo
默认的undo行为在我看来不能适应。
好在emacs28后有了undo-only和undo-redo。
显示指定一下evil的undo。
#+begin_src emacs-lisp
  (setq undo-no-redo t)
  (setq evil-want-fine-undo t)
  (setq evil-undo-system 'undo-redo
        evil-undo-function 'undo-only
        evil-redo-function 'undo-redo)

  (setq undo-limit 400000           ; 400kb (default is 160kb)
        undo-strong-limit 3000000   ; 3mb   (default is 240kb)
        undo-outer-limit 48000000)  ; 48mb  (default is 24mb)
#+end_src

启动undo-fu-session
doom配置里，undo-fu-session在undo-fu之后启动。但我不需要undo-fu。
添加一个hook直接启动。
#+begin_src emacs-lisp
  (add-hook! 'doom-first-buffer-hook #'global-undo-fu-session-mode)
#+end_src

** projectile
修改projectile查找project-root的方式
先从上到下，后从下到上。
#+begin_src emacs-lisp
  (use-package! projectile
    :commands (project-projectile))

  (defun projectile-root-default-directory (dir)
    "Retrieve the root directory of the project at DIR using `default-directory'."
    default-directory)

  (after! projectile
    (add-to-list 'projectile-project-root-files "go.mod")
    (setq projectile-project-root-functions '(projectile-root-local
                                              projectile-root-marked
                                              projectile-root-top-down
                                              projectile-root-bottom-up
                                              projectile-root-default-directory
                                              projectile-root-top-down-recurring)))

  (setq project-find-functions '(project-projectile project-try-vc))
  (setq xref-search-program 'ripgrep)
#+end_src

** recentf
设置recentf最大储存项
doom默认的200个也太少了，至少1000吧
#+begin_src emacs-lisp
  (after! recentf
    (setq recentf-max-saved-items 1000
          recentf-auto-cleanup 'mode)
    (remove-hook 'kill-emacs-hook #'recentf-cleanup))
#+end_src

** magit
设置clone的默认文件夹
#+begin_src emacs-lisp
  (setq magit-clone-default-directory "~/Codes/Lab/")
#+end_src

** recenter
设置各种跳转后居中
#+begin_src emacs-lisp
  (add-hook! 'better-jumper-post-jump-hook #'recenter)

  (defun recenter-advice (&rest args)
    (if (> (count-lines (point) (point-max)) 1)
        (recenter)))

  (advice-add #'find-file :after #'recenter-advice)
  (advice-add #'evil-goto-line :after #'recenter-advice)
  (advice-add #'org-roam-node-find :after #'recenter-advice)
  (advice-add #'+lookup--jump-to :after #'recenter-advice)
#+end_src

** evil-mc
使用evil-mc推荐的键位，简化进入多行编辑的按键
#+begin_src emacs-lisp
  (evil-define-key 'visual 'global
    "A" #'evil-mc-make-cursor-in-visual-selection-end
    "I" #'evil-mc-make-cursor-in-visual-selection-beg
    "N" #'+multiple-cursors/evil-mc-toggle-cursor-here)

  (evil-define-key 'normal 'evil-mc-key-map
    "Q" #'evil-mc-undo-all-cursors)
#+end_src

** lookup
与在新窗口查看定义和引用
#+begin_src emacs-lisp
  (use-package! doom-lookup-other-window
    :config
    (map! :nv "g D" #'+lookup/definition-other-window
          :nv "g R" #'+lookup/references-other-window
          :leader
          :desc "jump to reference other window" "c R" #'+lookup/references-other-window
          :desc "jump to definition other window" "c D" #'+lookup/definition-other-window))
#+end_src

** ediff
设置退出时不询问。并且打开时立刻跳转到第一个修改。
#+begin_src emacs-lisp
  (defun disable-y-or-n-p (orig-fun &rest args)
    (cl-letf (((symbol-function 'y-or-n-p) (lambda (prompt) t)))
      (apply orig-fun args)))
  (advice-add 'ediff-quit :around #'disable-y-or-n-p)

  (add-hook! 'ediff-startup-hook #'ediff-next-difference)
#+end_src

* 代码补全
我使用eglot+corfu的组合。尽量多的利用emacs已经合并的插件。
** eglot
#+begin_src emacs-lisp
  (after! eglot
    (setq eglot-events-buffer-size 0)
    (setq eglot-send-changes-idle-time 0.2)
    (setq eglot-stay-out-of '(yasnippet))
    (map! :map 'eglot-mode-map
          :nv "g D" nil
          :leader
          :desc "LSP start/restart" "c l" #'eglot
          :desc "LSP reconnect" "c L" #'eglot-shutdown
          :desc "LSP rename" "c n" #'eglot-rename)
    (set-popup-rule! "^\\*eglot-help" :size 0.3 :quit t :select nil)
    ;; (set-face-attribute 'eglot-highlight-symbol-face nil :background "#d6d4d4")
    (push :inlayHintProvider eglot-ignored-server-capabilities)
    (set-face-attribute 'eglot-inlay-hint-face nil :weight 'bold :height 0.9))
#+end_src

modeline设置，不在modeline上显示eglot任何信息
#+begin_src emacs-lisp
  (defun my-remove-eglot-mode-line()
    "Remove `eglot' from mode-line"
    (setq mode-line-misc-info
              (delq (assq 'eglot--managed-mode mode-line-misc-info) mode-line-misc-info)))
  (add-hook 'eglot-managed-mode-hook #'my-remove-eglot-mode-line)
#+end_src

设置 doom 不延迟退出 eglot
#+begin_src emacs-lisp
  (setq +lsp-defer-shutdown nil)
#+end_src

** 使用eglot-booster
使eglot运行速度变快的魔法: https://github.com/blahgeek/emacs-lsp-booster
#+begin_src emacs-lisp
  (use-package! eglot-booster
    :after eglot
    :config (eglot-booster-mode))
#+end_src

** corfu
#+begin_src emacs-lisp
  (after! corfu
    (setq corfu-preselect 'prompt
          corfu-auto-delay 0.02
          corfu-auto-prefix 1
          corfu-on-exact-match nil
          corfu-popupinfo-max-height 20
          corfu-separator 32
          corfu-count 10)
    (map! :map corfu-map
          :i "C-j" #'corfu-next
          :i "C-k" #'corfu-previous
          :i "C-i" #'corfu-insert-separator
          :i "C-s" #'corfu-insert-separator
          :i "C-h" #'corfu-info-documentation
          :i "C-l" #'corfu-complete
          :i "C-g" #'corfu-quit)
    (map! :i "C-S-p" #'cape-file)
    (add-hook! 'evil-insert-state-exit-hook #'corfu-quit)
    (set-face-attribute 'corfu-current nil :background "#cde1f8"))

  (after! corfu-popupinfo
    (setq corfu-popupinfo-delay nil))
#+end_src

设置minibuffer的补全需要两个键
#+begin_src emacs-lisp
  (setq-hook! 'minibuffer-setup-hook corfu-auto-prefix 2)
#+end_src

设置补全文件名时，允许文件名中存在空格
#+begin_src emacs-lisp
  (setq thing-at-point-file-name-chars
        (concat thing-at-point-file-name-chars " ・()（）Z-a！+&"))
#+end_src

** flymake
使flymake只在保存后检查错误
设置eglot，使其适配flymake保存后检查错误。方法解释见[[https://github.com/joaotavora/eglot/issues/1296#issuecomment-1727978307][issue]]
#+begin_src emacs-lisp
  (after! flymake
    (set-popup-rule! "^\\*format-all-errors*" :size 0.15 :select nil :modeline nil :quit t)
    (set-popup-rule! "^\\*Flymake diagnostics" :size 0.2 :modeline nil :quit t :select nil)
    (setq flymake-no-changes-timeout nil)

    ;; make eglot compatible with flymake-no-changes-timeout=nil
    (cl-defmethod eglot-handle-notification :after
      (_server (_method (eql textDocument/publishDiagnostics)) &key uri
               &allow-other-keys)
      (when-let ((buffer (find-buffer-visiting (eglot-uri-to-path uri))))
        (with-current-buffer buffer
          (if (and (eq nil flymake-no-changes-timeout)
                   (not (buffer-modified-p)))
              (flymake-start t)))))

    (setq-hook! 'org-src-mode-hook flymake-no-changes-timeout 0.2))
#+end_src

在org-src时自动检测错误
#+begin_src emacs-lisp
  (setq-hook! 'org-src-mode-hook flymake-no-changes-timeout 0.2)
#+end_src

** eldoc
设置eldoc buffer为popup
也可以配置flymake约eldoc同时显示，见[[https://github.com/joaotavora/eglot/issues/1171][issue]]，但我不喜欢这种形式
#+begin_src emacs-lisp
  (after! eldoc
    (setq eldoc-echo-area-display-truncation-message nil
          eldoc-echo-area-use-multiline-p nil
          eldoc-echo-area-prefer-doc-buffer t)
    (set-face-attribute 'eldoc-highlight-function-argument nil :background "#cde1f8")
    (set-popup-rule! "^\\*eldoc*" :size 0.15 :modeline nil :quit t))
#+end_src

** dabbrev
dabbrev是emacs的一个补全后端，设置它只补全ascii英文，而不去补全中文。
因为中文没有空格等分隔开，一补全就是一句，没有意义。
#+begin_src emacs-lisp
  (use-package dabbrev
    :config
    (setq dabbrev-abbrev-char-regexp "[-_A-Za-z0-9]")
    (setq dabbrev-case-distinction nil)
    (setq dabbrev-case-replace nil))
#+end_src

** 忽略大小写
#+begin_src emacs-lisp
  (setq completion-ignore-case t)
#+end_src

* 文件管理
** dired
补充一些 dired 的设置
#+begin_src emacs-lisp
    (after! dired
      (setq dired-recursive-deletes 'always
            delete-by-moving-to-trash t)
      (setq dired-switches-in-mode-line 0
            dired-listing-switches
            "-l --almost-all --human-readable --group-directories-first --no-group --time-style \"+%Y-%m-%d %H:%M:%S\"")
      (setq dired-omit-files
          (concat "\\`[.][.]?\\'"
                  "\\|^\\.DS_Store\\'"
                  "\\|^\\.project\\(?:ile\\)?\\'"
                  "\\|^\\.\\(?:svn\\|git\\)\\'"
                  "\\|^\\.ccls-cache\\'"
                  "\\|\\(?:\\.js\\)?\\.meta\\'"
                  "\\|\\.\\(?:elc\\|o\\|pyo\\|swp\\|class\\)\\'"))
  )
#+end_src

** dirvish
Dirvish真是接近完美的文件管理器。除了鼠标操作比较难受外，处处让我感到满足。
#+begin_src emacs-lisp
  (use-package! dirvish
    :custom
    (dirvish-quick-access-entries
     '(("h" "~/"                "Home")
       ("c" "~/Codes/"          "Codes")
       ("w" "~/Works/"          "Works")
       ("d" "~/Downloads"       "Downloads")
       ("P" "~/Pictures/"       "Pictures")
       ("v" "~/VCBs/"           "Videos")
       ("n" "~/Notes/"          "Notes")
       ("b" "~/Books/"          "Books")))
    :config
    (add-to-list 'dirvish-video-exts "m2ts")
    (setq dirvish-side-width 40
          dirvish-side-auto-close t
          dirvish-side-display-alist `((side . right) (slot . -1)))
    (setq dirvish-use-mode-line nil
          dirvish-default-layout '(0 0 0.5)
          dirvish-hide-cursor '(dirvish dirvish-side dired)
          dirvish-path-separators (list "  ~" "   " "/")
          dirvish-header-line-format
          '(:left (path) :right (yank sort index " "))
          dirvish-open-with-programs
          `((,dirvish-audio-exts . ("mpv" "%f"))
            (,dirvish-video-exts . ("mpv" "%f"))
            (,dirvish-image-exts . ("loupe" "%f"))
            (("doc" "docx") . ("wps" "%f"))
            (("ppt" "pptx") . ("wpp" "%f"))
            (("xls" "xlsx") . ("et" "%f"))
            (("pdf") . ("evince" "%f"))
            (("epub") . ("koodo-reader" "%f")))))
#+end_src

** dirvish mediainfo预览优化
我常常需要mediainfo显示视频的多条音轨信息。
糊一个方法做预览优化
#+begin_src emacs-lisp
  (add-hook! 'dirvish-setup-hook
    (use-package! dirvish-video-mediainfo-enhance))
#+end_src

** file-roller
使用file-roller压缩和解压
#+begin_src emacs-lisp
  (use-package! dired-archieve
    :after dired
    :config
    (map! :map 'dired-mode-map
          :localleader
          "z" #'dired-archieve-add
          "e" #'dired-archieve-extract))
#+end_src

** explorer
#+begin_src emacs-lisp
  (defun my-open-explorer()
    (interactive)
    (call-process-shell-command "dolphin ." nil 0))

  (map! [f9] #'my-open-explorer
        :leader "o e" #'my-open-explorer)
#+end_src

** diff-hl-dired 背景色
设置 diff-hl-dired 的背景色，使能够一眼看出文件的状态
#+begin_src emacs-lisp
  (after! diff-hl-dired
    (set-face-attribute 'diff-hl-dired-unknown nil :background "#ffffff" :foreground "#ffffff")
    (set-face-attribute 'diff-hl-dired-ignored nil :background "#c0bfbf" :foreground "#c0bfbf")
    (set-face-attribute 'diff-hl-dired-change nil :background "#f2d366")
    (set-face-attribute 'diff-hl-dired-delete nil :background "#c82829")
    (set-face-attribute 'diff-hl-dired-insert nil :background "#a9ba66"))
#+end_src

** dirvish focus
当 dired window 没被选中时，取消 dirvish 的高亮
#+begin_src emacs-lisp
  (defun dirvish-unfocus ()
    (interactive)
    (face-remap-add-relative 'dirvish-hl-line '(:background "#d6d4d4")))

  (defun dirvish-focus ()
    (interactive)
    (face-remap-add-relative 'dirvish-hl-line '(:background "#4271ae")))

  (defun dirvish-focus-change (&rest w)
    (let* ((sw (frame-selected-window))
           (sb (window-buffer sw))
           (ow (old-selected-window))
           (ob (window-buffer ow)))
      (progn
        (with-current-buffer sb
          (when (eq major-mode #'dired-mode)
            (dirvish-focus)))
        (with-current-buffer ob
          (when (eq major-mode #'dired-mode)
            (dirvish-unfocus))))))

  (add-hook! 'dired-mode-hook
    (add-hook 'window-selection-change-functions #'dirvish-focus-change 0 t))
#+end_src

* 终端
使用性能更好的vterm
#+begin_src emacs-lisp
  (setq vterm-always-compile-module t)
  (setq vterm-buffer-name-string "*vterm: %s*")
  (after! vterm
    (setq vterm-timer-delay    0.02
          vterm-max-scrollback 20000)
    (advice-add #'vterm--redraw :after (lambda (&rest args) (evil-refresh-cursor evil-state)))
    (set-face-attribute 'ansi-color-bright-black nil :foreground "#C0C0C0")
    )
#+end_src

vterm与doom的适配
禁用+popup-adjust-fringes-h和+popup-margin-width
来让vterm不在打开时长度超过一行而导致鬼畜换行
目前还不知道有什么副作用
#+begin_src emacs-lisp
  ;; (setq +popup-margin-width nil)
  ;; (add-hook! 'doom-first-buffer-hook
  ;;   (remove-hook '+popup-buffer-mode-hook #'+popup-adjust-fringes-h))

  (add-hook! 'vterm-mode-hook (setq-local kill-buffer-query-functions nil))
#+end_src

使用自定义的vterm-toggle。
#+begin_src emacs-lisp
  (use-package! doom-vterm-toggle
    :commands (doom-vterm-toggle-directory
               doom-vterm-toggle-project))

  (map! :map vterm-mode-map [f4] nil)
  (map! [f4] #'doom-vterm-toggle-project
        [C-f4] #'doom-vterm-toggle-directory
        [S-f4] #'+vterm/here
        :leader
        "o t" #'doom-vterm-toggle-project)
#+end_src

** Shell Command
设置习惯的 shell command 快捷键
#+begin_src emacs-lisp
  (map! :leader "S" #'shell-command
        :leader "A" #'async-shell-command)

  (set-popup-rule! "^\\*Async Shell Command" :size 0.25 :quit 'current :select t :modeline t)
#+end_src

* Org-Mode
** 基本外观
配置一下Org-Mode的主题颜色、字体大小等。
最后一行用于设置org-mode的代码块，使其能有代码缩进，更好看些。
另外做个备忘，org-mode中提升标题等级是M+左箭头，降低是M+右箭头。
#+begin_src emacs-lisp
  (setq org-directory "~/Notes")
  (custom-set-faces
   '(org-level-1 ((t (:height 1.3 :foreground "#4271ae" :weight ultra-bold))))
   '(org-level-2 ((t (:height 1.2 :foreground "#8959a8" :weight extra-bold))))
   '(org-level-3 ((t (:height 1.1 :foreground "#718c00" :weight bold))))
   '(org-level-4 ((t (:height 1.0 :foreground "#eab700" :weight semi-bold))))
   '(org-level-5 ((t (:height 1.0 :foreground "#c82829" :weight normal))))
   '(org-level-6 ((t (:height 1.0 :foreground "#70c0ba" :weight normal))))
   '(org-level-7 ((t (:height 1.0 :foreground "#b77ee0" :weight normal))))
   '(org-level-8 ((t (:height 1.0 :foreground "#9ec400" :weight normal)))))

  (after! org
    (setq org-src-preserve-indentation nil
          org-image-actual-width 1280
          org-hide-emphasis-markers t
          org-support-shift-select t)
    (map! :map org-mode-map
          :localleader "-" #'org-emphasize))
#+end_src

** org-evil
doom为org-mode设计了一些用不上的快捷键。
尤其是insert模式时，C-l、C-h的键位都被改了，我不能接受。
#+begin_src emacs-lisp
  (after! evil-org
    (map! :map evil-org-mode-map
          :i "C-l" nil
          :i "C-h" nil
          :i "C-j" nil
          :i "C-k" nil))
#+end_src

** org-appear
#+begin_src emacs-lisp
  (use-package! org-appear
    :commands (org-appear-mode)
    :init
    (setq org-appear-autolinks t))

  (add-hook 'org-mode-hook #'org-appear-mode)
#+end_src

** org-roam
设置笔记文件夹
#+begin_src emacs-lisp
  (setq org-roam-directory "~/Notes/Roam")
#+end_src

禁用补全
#+begin_src emacs-lisp
  (after! org-roam
    (setq org-roam-completion-everywhere nil))
#+end_src

日志模板。
主要是使用模板设置保存的文件夹，来兼容我以前的日志模式。
我希望我创建日志的时候能一键弹出，而不用选择模板什么的，所以只设置一个模板。
#+begin_src emacs-lisp
  (setq org-roam-dailies-directory "~/Notes/Daily")
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %?"
           :target (file+head "%<%Y>/%<%Y-%m>/%<%Y-%m-%d>.org"
                              "#+title: %<%Y-%m-%d>\n"))))
  (map! :n "[ J" #'org-roam-dailies-goto-yesterday
        :n "] J" #'org-roam-dailies-goto-tomorrow
        :leader
        :desc "my Journal today" "J" #'org-roam-dailies-goto-today
        :desc "org-roam find node" "Z" #'org-roam-node-find)
#+end_src

设置模板
同样，也是通过模板来设置保存的文件夹。
org-roam默认将文件堆在一个文件夹下我是不太喜欢的。
#+begin_src emacs-lisp
  (setq org-roam-capture-templates '(
            ("d" "Default" plain "%?"
            :target (file+head "Default/%<%Y%m%d%H%M%S>-${slug}.org"
                                "#+title: ${title}\n#+filetags: \n\n")
            :unnarrowed t)
            ("l" "Learn" plain "%?"
            :target (file+head "Learn/%<%Y%m%d%H%M%S>-${slug}.org"
                                "#+title: ${title}\n#+filetags: :learn: \n\n")
            :unarrowed t)
            ("t" "Think" plain "%?"
            :target (file+head "Think/%<%Y%m%d%H%M%S>-${slug}.org"
                                "#+title: ${title}\n#+filetags: :think: \n\n")
            :unnarrowed t)
            ("c" "Create" plain "%?"
            :target (file+head "Create/%<%Y%m%d%H%M%S>-${slug}.org"
                                "#+title: ${title}\n#+filetags: :create: \n\n")
            :unnarrowed t)))
#+end_src

** todo list
比起使用 agenda，我更喜欢直接打开我的任务列表
#+begin_src emacs-lisp
  (map! :leader "L" (lambda () (interactive) (find-file (concat org-directory "/todo.org"))))
#+end_src


* 语言mode
** markdown-mode
也是设置一下字体大小和颜色。
在emacs下我也很少写markdown了。
#+begin_src emacs-lisp
  (custom-set-faces
   '(markdown-code-face ((t (:background "#f5f5f5"))))
   '(markdown-header-delimiter-face ((t (:foreground "#616161" :height 0.9))))
   '(markdown-header-face-1 ((t (:inherit markdown-header-face :height 1.3 :foreground "#4271ae" :weight ultra-bold))))
   '(markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.2 :foreground "#8959a8" :weight extra-bold))))
   '(markdown-header-face-3 ((t (:inherit markdown-header-face :height 1.1 :foreground "#718c00" :weight bold))))
   '(markdown-header-face-4 ((t (:inherit markdown-header-face :height 1.0 :foreground "#eab700" :weight semi-bold))))
   '(markdown-header-face-5 ((t (:inherit markdown-header-face :height 1.0 :foreground "#c82829" :weight normal))))
   '(markdown-header-face-6 ((t (:inherit markdown-header-face :height 1.0 :foreground "#70c0ba" :weight normal))))
   '(markdown-header-face-7 ((t (:inherit markdown-header-face :height 1.0 :foreground "#b77ee0" :weight normal)))))

  (add-hook! 'markdown-mode-hook (setq-local markdown-fontify-code-blocks-natively t))
  (after! markdown-mode
    (setq markdown-fontify-whole-heading-line nil)
    (setq markdown-fontify-code-blocks-natively t)
    (setq markdown-max-image-size '(640 . 480))
    (map! :map markdown-mode-map :n "z i" #'markdown-toggle-inline-images)
    (set-popup-rule! "^\\*edit-indirect" :size 0.42 :quit nil :select t :autosave t :modeline t :ttl nil))
#+end_src

** go-mode
开启lsp的自动import和format。
因为在开启lsp的情况下，go-mode的这部分功能被关闭了，全部交给了gopls。
#+begin_src emacs-lisp
  (defun my-eglot-organize-imports ()
    (ignore-errors(call-interactively 'eglot-code-action-organize-imports)))
  (defun my-go-mode-init ()
    (add-hook 'before-save-hook #'eglot-format-buffer -10 t)
    (add-hook 'before-save-hook #'my-eglot-organize-imports nil t))
  (add-hook 'go-mode-hook #'my-go-mode-init)
#+end_src

禁用没用的快捷键，以免按错
#+begin_src emacs-lisp
  (after! go-mode
    (map! :map go-mode-map
          :localleader
          "h" nil
          "e" nil
          "i" nil
          (:prefix ("i" . "imports")
                   "i" #'go-goto-imports
                   "a" #'go-import-add
                   "r" #'go-remove-unused-imports)))
#+end_src

** protobuf-mode
#+begin_src emacs-lisp
  (use-package protobuf-mode
    :commands (protobuf-mode)
    :mode("\\.proto\\'" . protobuf-mode)
    :config
    (add-hook 'protobuf-mode-hook
              (lambda ()
                (setq-local compile-command
                            (format "protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative %s"
                                    (file-name-nondirectory buffer-file-name))))))
#+end_src

** dockerfile-mode
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :commands (dockerfile-mode)
    :mode("\\Dockerfile\\'" . dockerfile-mode))
#+end_src

** python
设置在org和markdown的代码块中，"py"打开python-mode
自己用还是尽量写全python，主要是为了阅读其他人写的"py"代码块
#+begin_src emacs-lisp
  (after! org
    (add-to-list 'org-src-lang-modes '("py" . python-mode)))

  (after! markdown-mode
    (add-to-list 'markdown-code-lang-modes '("py" . python-mode)))

  (after! python
    (setq python-shell-interpreter "python")
    (setenv "PYTHONIOENCODING" "utf-8"))
#+end_src

加载pyright配置
#+begin_src emacs-lisp
  (setq-hook! 'python-mode-hook eglot-workspace-configuration
              '(:python.analysis (:autoSearchPaths t
                                  :useLibraryCodeForTypes t
                                  :typeCheckingMode "basic"
                                  :diagnosticMode "openFilesOnly")))
#+end_src

设置使用ruff格式化python代码
apheleia更新后可以删除push ruff的代码
#+begin_src emacs-lisp
  (after! apheleia
    (setf (alist-get 'python-mode apheleia-mode-alist)
        '(ruff)))
#+end_src

** vapoursynth
设置用python-mode打开vpy文件
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.vpy\\'" . python-mode))

  ;; (defun my-vscp-init()
  ;;   (when (s-suffix-p ".vpy" buffer-file-name)
  ;;     (setq-local python-interpreter "/home/jiesamb/Vapoursynth/bin/python3")
  ;;     (setenv "PYTHONPATH" "/home/jiesamb/Vapoursynth/scripts"))
  ;;   )
  ;; (add-hook 'python-mode-local-vars-hook #'my-vscp-init -10)
#+end_src

设置vspreview，vsbench等命令
#+begin_src emacs-lisp
  ;; (setenv "QT_QPA_PLATFORM" "wayland")

  (defun vspreview()
    "Vapoursynth preview this script."
    (interactive)
    (async-shell-command
     (format "~/Env/vapoursynth/bin/python3 -m vspreview %s" (shell-quote-argument buffer-file-name))
     "*vspreview*"))

  (defun vsbench()
    "Vapoursynth bench this script."
    (interactive)
    (async-shell-command
     (format "~/Env/vapoursynth/bin/vspipe -p %s ." (shell-quote-argument buffer-file-name))
     "*vsbench*"))

  (map! :map python-mode-map
          :localleader
          "p" #'vspreview
          "b" #'vsbench)
#+end_src

设置窗口popup
#+begin_src emacs-lisp
  (set-popup-rule! "^\\*vspreview*" :size 0.2 :quit t :select nil)
  (set-popup-rule! "^\\*vsbench*" :size 0.2 :quit t :select nil)
#+end_src

** rust
设置rustfmt的edition信息
#+begin_src emacs-lisp
  (after! apheleia
    (setf (alist-get 'rustfmt apheleia-formatters)
        '("rustfmt" "--quiet" "--emit" "stdout" "--edition" "2021")))
#+end_src

** lua
#+begin_src emacs-lisp
  (after! lua-mode
    (setq +lua-lsp-dir "/usr/lib/lua-language-server/"))
#+end_src

** yaml
#+begin_src emacs-lisp
  (add-hook 'yaml-mode-hook #'turn-off-smartparens-mode nil t)
  (add-hook 'yaml-mode-hook #'electric-pair-local-mode nil t)
#+end_src

* 工具包
** emacs-rime
#+begin_src emacs-lisp
  (use-package! rime
    :init
    (setq rime-user-data-dir "~/.local/share/fcitx5/rime/")
    :custom
    (default-input-method "rime")
    :config
    (setq rime-show-candidate 'posframe
          rime-posframe-style 'simple
          rime-show-preedit 'inline)
    (setq rime-posframe-properties (list :font "霞鹜文楷等宽"
                                         :border-width 3
                                         :border-color "#cde1f8"
                                         :left-fringe 10))
    (map! :i "C-SPC" #'toggle-input-method)
    (set-face-attribute 'rime-preedit-face nil :height 110 :inverse-video 'unspecified)
    (set-face-attribute 'rime-default-face nil :background "#fdfdfd")
    (add-hook! 'input-method-activate-hook
      (defun rime-inside-minibuffer-change-background ()
        (when (minibufferp)
          (face-remap-add-relative 'rime-default-face '(:background "#f1f1f1"))))))
#+end_src

** 输入法切换
使用sis实现中英文输入法自动切换自动切换。
#+begin_src emacs-lisp
  (use-package! sis
    :config
    ;; (sis-ism-lazyman-config "1" "2" 'fcitx5)
    (sis-ism-lazyman-config nil "rime" 'native)
    (sis-global-respect-mode t)
    (sis-global-context-mode t))
#+end_src

** tabspaces
加强tabbar，管理工作区buffer
#+begin_src emacs-lisp
  (use-package! tabspaces
    :hook (doom-init-ui . tabspaces-mode)
    :commands (tabspaces-switch-or-create-workspace
               tabspaces-close-workspace)
    :init
    (setq tab-bar-show nil)
    (tab-rename "Default")
    :custom
    (tabspaces-use-filtered-buffers-as-default nil)
    (tabspaces-default-tab "Default")
    (tabspaces-remove-to-default t)
    (tabspaces-include-buffers '("*scratch*"))
    (tabspaces-session nil)
    (tabspaces-session-auto-restore nil)
    :config
    (map! :n "[ TAB" #'tab-previous
          :n "] TAB" #'tab-next
          :leader
          :desc "switch or create tab" "TAB" #'tab-bar-switch-to-tab
          :desc "close current tab" [backtab] #'tab-bar-close-tab))
#+end_src

设置addvice，让新建tab时只剩一个scratch buffer
#+begin_src emacs-lisp
  (defun tabspaces-reset-advice()
    (switch-to-buffer "*scratch*"))

  (advice-add #'tabspaces-reset-buffer-list :before #'tabspaces-reset-advice)
#+end_src

设置consult，显示workspace buffer
#+begin_src emacs-lisp
  (after! consult
    ;; hide full buffer list (still available with "b" prefix)
    (consult-customize consult--source-buffer :hidden t :default nil)
    ;; set consult-workspace buffer list
    (defvar consult--source-workspace
      (list :name     "Workspace Buffers"
            :narrow   ?w
            :history  'buffer-name-history
            :category 'buffer
            :state    #'consult--buffer-state
            :default  t
            :items    (lambda () (consult--buffer-query
                                  :predicate #'tabspaces--local-buffer-p
                                  :sort 'visibility
                                  :as #'buffer-name)))

      "Set workspace buffer list for consult-buffer.")
    (add-to-list 'consult-buffer-sources 'consult--source-workspace))
#+end_src

使用tab-bookmark来保存tab
#+begin_src emacs-lisp
  (use-package! tab-bookmark
    :commands (tab-bookmark-save
               tab-bookmark-handler))

  (map! :leader
        :desc "Bookmark Tab" "v m" #'tab-bookmark-save)
#+end_src

** 色彩显示
#+begin_src emacs-lisp
  (use-package! colorful-mode
    :commands (colorful-mode
               global-colorful-mode)
    :config (dolist (mode '(html-mode php-mode help-mode helpful-mode))
              (add-to-list 'global-colorful-modes mode)))

  (map! :leader
        :desc "toggle colorful mode" "t s" #'colorful-mode)
#+end_src

** symbol-overlay
#+begin_src emacs-lisp
  (use-package symbol-overlay
    :diminish
    :custom-face
    (symbol-overlay-default-face ((t (:inherit region :background unspecified :foreground unspecified))))
    (symbol-overlay-face-1 ((t (:inherit nerd-icons-blue :background unspecified :foreground unspecified :inverse-video t))))
    (symbol-overlay-face-2 ((t (:inherit nerd-icons-pink :background unspecified :foreground unspecified :inverse-video t))))
    (symbol-overlay-face-3 ((t (:inherit nerd-icons-yellow :background unspecified :foreground unspecified :inverse-video t))))
    (symbol-overlay-face-4 ((t (:inherit nerd-icons-purple :background unspecified :foreground unspecified :inverse-video t))))
    (symbol-overlay-face-5 ((t (:inherit nerd-icons-red :background unspecified :foreground unspecified :inverse-video t))))
    (symbol-overlay-face-6 ((t (:inherit nerd-icons-orange :background unspecified :foreground unspecified :inverse-video t))))
    (symbol-overlay-face-7 ((t (:inherit nerd-icons-green :background unspecified :foreground unspecified :inverse-video t))))
    (symbol-overlay-face-8 ((t (:inherit nerd-icons-cyan :background unspecified :foreground unspecified :inverse-video t))))
    :bind (("M-i" . symbol-overlay-put)
           ("M-n" . symbol-overlay-jump-next)
           ("M-p" . symbol-overlay-jump-prev)
           ("M-N" . symbol-overlay-switch-forward)
           ("M-P" . symbol-overlay-switch-backward)
           ("M-C" . symbol-overlay-remove-all)
           ([M-f3] . symbol-overlay-remove-all))
    :hook (((prog-mode yaml-mode) . symbol-overlay-mode)
           (iedit-mode            . turn-off-symbol-overlay)
           (iedit-mode-end        . turn-on-symbol-overlay))
    :init (setq symbol-overlay-idle-time 0.1))
#+end_src
** 代理配置
#+begin_src emacs-lisp
  (defun my-emacs-use-proxy()
    (interactive)
    (setenv "http_proxy" "http://127.0.0.1:17899")
    (setenv "https_proxy" "http://127.0.0.1:17899")
    (setenv "all_proxy" "socks5://127.0.0.1:17899")
    (message "Use Proxy"))

  (defun my-emacs-not-use-proxy()
    (interactive)
    (setenv "http_proxy" "")
    (setenv "https_proxy" "")
    (setenv "all_proxy" "")
    (message "Not use Proxy"))

  (map! :leader
        :desc "use proxy" "v p" #'my-emacs-use-proxy
        :desc "use proxy" "v P" #'my-emacs-not-use-proxy)
#+end_src

** 单词翻译
#+begin_src emacs-lisp
  (use-package! fanyi
    :commands (fanyi-dwim
               fanyi-dwim2)
    :custom
    (fanyi-providers '(;; 海词
                       fanyi-haici-provider
                       ;; 有道同义词词典
                       fanyi-youdao-thesaurus-provider
                       ;; Etymonline
                       ;; fanyi-etymon-provider
                       ;; Longman
                       ;; fanyi-longman-provider
                       )))

  (set-popup-rule! "^\\*fanyi*" :size 0.3 :modeline nil :quit t)
  (add-hook 'fanyi-mode-hook #'doom-disable-line-numbers-h)
  (map! :leader
        :desc "Translate word" "v t" #'fanyi-dwim2)
#+end_src

** base64-img-toggle
直接在emacs里看base64的验证码
#+begin_src emacs-lisp
  (use-package! base64-img-toggle
    :commands (base64-img-toggle-region))

  (set-popup-rule! "^\\*base64-img-toggle" :size 0.15 :modeline nil :quit t)
  (map! :leader
        :desc "View Base64 img" "v b" #'base64-img-toggle-region)
#+end_src

** fringe-scale
#+begin_src emacs-lisp
  (use-package! fringe-scale
    :init
    (set-fringe-mode '(8 . 16))
    :config
    (fringe-scale-setup))

  (setq builtin-bitmaps
        ' ((question-mark [#x3c #x7e #xc3 #xc3 #x0c #x18 #x18 #x00 #x18 #x18])
       (exclamation-mark [#x18 #x18 #x18 #x18 #x18 #x18 #x18 #x00 #x18 #x18])
       (left-arraw [#x18 #x30 #x60 #xfc #xfc #x60 #x30 #x18])
       (right-arrow [#x18 #x0c #x06 #x3f #x3f #x06 #x0c #x18])
       (up-arrow [#x18 #x3c #x7e #xff #x18 #x18 #x18 #x18])
       (down-arrow [#x18 #x18 #x18 #x18 #xff #x7e #x3c #x18])
       (left-curly-arrow [#x3c #x7c #xc0 #xe4 #xfc #x7c #x3c #x7c])
       (right-curly-arrow [#x3c #x3e #x03 #x27 #x3f #x3e #x3c #x3e])
       (left-triangle [#x03 #x0f #x1f #x3f #x3f #x1f #x0f #x03])
       (right-triangle [#xc0 #xf0 #xf8 #xfc #xfc #xf8 #xf0 #xc0])
       (top-left-angle [#xfc #xfc #xc0 #xc0 #xc0 #xc0 #xc0 #x00])
       (top-right-angle [#x3f #x3f #x03 #x03 #x03 #x03 #x03 #x00])
       (bottom-left-angle [#x00 #xc0 #xc0 #xc0 #xc0 #xc0 #xfc #xfc])
       (bottom-right-angle [#x00 #x03 #x03 #x03 #x03 #x03 #x3f #x3f])
       (left-bracket [#xfc #xfc #xc0 #xc0 #xc0 #xc0 #xc0 #xc0 #xfc #xfc])
       (right-bracket [#x3f #x3f #x03 #x03 #x03 #x03 #x03 #x03 #x3f #x3f])
       (filled-rectangle [#xfe #xfe #xfe #xfe #xfe #xfe #xfe #xfe #xfe #xfe #xfe #xfe #xfe])
       (hollow-rectangle [#xfe #x82 #x82 #x82 #x82 #x82 #x82 #x82 #x82 #x82 #x82 #x82 #xfe])
       (hollow-square [#x7e #x42 #x42 #x42 #x42 #x7e])
       (filled-square [#x7e #x7e #x7e #x7e #x7e #x7e])
       (vertical-bar [#xc0 #xc0 #xc0 #xc0 #xc0 #xc0 #xc0 #xc0 #xc0 #xc0 #xc0 #xc0 #xc0])
       (horizontal-bar [#xfe #xfe])))

  (dolist (bitmap builtin-bitmaps)
    (define-fringe-bitmap (car bitmap) (cadr bitmap)))
#+end_src

更改flymake指示的bitmap样式
#+begin_src emacs-lisp
  (use-package! flymake-triangle-bitmap
    :after flymake
    :config
    (setq flymake-note-bitmap    '(my-small-left-triangle compilation-info)
          flymake-error-bitmap   '(my-small-left-triangle compilation-error)
          flymake-warning-bitmap '(my-small-left-triangle compilation-warning)))
#+end_src
